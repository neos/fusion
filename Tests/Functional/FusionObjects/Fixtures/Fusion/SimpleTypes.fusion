// Examples of a simple Value object
prototype(Neos.Fusion:Value).@class = 'Neos\\Fusion\\FusionObjects\\ValueImplementation'

simpleTypes.booleanTrue = Neos.Fusion:Value {
  value = true
}
simpleTypes.booleanFalse = Neos.Fusion:Value {
  value = false
}
simpleTypes.null = Neos.Fusion:Value {
  value = NULL
}
simpleTypes.wrappedString = Neos.Fusion:Value {
  value = 'Hello, '
  value.@process.1 = ${value + 'Foo'}
}


// with the following lines, we test that Runtime::evaluate works on all three data types:
// 1. Eel, 2. Plain Values, 3. Fusion Objects
// (without processors. Processors are tested in Processor.fusion)
simpleTypes.stringAsEel = ${'A simple string value is not a Fusion object'}
simpleTypes.stringAsPlainValue = 'A simple string value is not a Fusion object'
simpleTypes.stringAsFusion = Neos.Fusion:Value {
  value = 'A simple string value is not a Fusion object'
}

// with the following lines, we test that AbstractFusionObject::fusionObject works on all three
// data types (without processors. Processors are tested in Processor.fusion)
simpleTypes.valueWithNestedPlainValue = Neos.Fusion:Value {
  value = 'A simple value'
}
simpleTypes.valueWithNestedEel = Neos.Fusion:Value {
  value = ${'A simple value'}
}
simpleTypes.valueWithNestedFusion = Neos.Fusion:Value {
  value = Neos.Fusion:Value {
    value = 'A simple value'
  }
}

simpleTypes.missingImplementation = Acme:Test
