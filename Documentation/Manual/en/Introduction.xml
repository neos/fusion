<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xhtml="http://www.w3.org/1999/xhtml"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:ns="http://docbook.org/ns/docbook"
         xmlns:mathml="http://www.w3.org/1998/Math/MathML">
  <title>Introduction</title>

  <para>TYPO3 is known to be a very powerful, yet complex content management
  system. Although several ready-made templates and even kits for
  out-of-the-box websites exist for TYPO3, most of the users and developers
  are attracted by the flexibility and the high degree of freedom TYPO3 allows
  for the design and functionality of feature-rich websites. For those who
  want more than a point and click web design with the option to choose from a
  red or purple background, it is highly recommended to delve into
  TypoScript.</para>

  <section>
    <title>What is TypoScript?</title>

    <para>Since its early versions, TypoScript has been an important factor
    for the success of TYPO3. A lot of myths exist about what TypoScript is
    and many people experienced that it can be a thin line between loving and
    dooming TypoScript. However, TypoScript has proven to be a very effective
    way of writing down configuration.</para>

    <para>For the version 5 of TYPO3, the concept of TypoScript and its syntax
    has been cleaned up and extended in some aspects. The goal was to achieve
    more consistency and a predictable, yet more intuitive syntax for TYPO3
    veterans and newcomers likewise. If you are already an experienced
    TypoScript developer, you might want to skip this introduction and rather
    refer to the chapter <quote>What's new in TypoScript 2.0?</quote>.</para>

    <para>Let's start with some basic facts about TypoScript:</para>

    <itemizedlist>
      <listitem>
        <para>TypoScript is a <emphasis>syntax</emphasis> for defining
        information in a hierarchical structure using simple ASCII text
        content</para>
      </listitem>

      <listitem>
        <para>TypoScript is not a scripting language. It is comparable to
        formats like <link xl:href="http://www.yaml.org">YAML</link> or <link
        xl:href="http://www.w3.org/XML/">XML</link> where the semantics is
        defined by the <emphasis>application</emphasis> and not by format
        itself.</para>
      </listitem>

      <listitem>
        <para>In the TYPO3 CMS, TypoScript is mainly used as an
        <emphasis>object definition language </emphasis>for</para>

        <itemizedlist>
          <listitem>
            <para>setting generic configuration options</para>
          </listitem>

          <listitem>
            <para>defining the rendering process for a website</para>
          </listitem>
        </itemizedlist>
      </listitem>
    </itemizedlist>

    <para>TypoScript avails itself of the <firstterm>Object</firstterm>
    paradigm and offers an effective syntax for defining objects and their
    properties. The following code snippet defines a new person and assigns a
    few properties:</para>

    <example>
      <title>Defining a Person and its properties</title>

      <programlisting language="typoscript">somePerson = Person
somePerson.firstName = "John"
somePerson.lastName = "Doe"</programlisting>
    </example>

    <para>Although the above example is perfectly valid TypoScript, it doesn't
    neccessarily mean that it has a meaning within TYPO3 - that depends on the
    scope where this chunk of TypoScript is used, not on the syntax itself.
    Here is a more abstract example, still with a valid syntax but probably no
    meaning at all:</para>

    <example>
      <title>Meaningless but valid TypoScript</title>

      <programlisting language="typoscript">asdf = Qwerty
asdf.zxcvbnm = "uiop"
asdf.backgroundColor = BLUE</programlisting>
    </example>

    <para>Both examples define objects and their properties. In the first case
    we define a <classname>Person</classname> object which is identified by
    the string <literal>somePerson</literal>. This object has two properties,
    a <literal>firstName</literal> and a <literal>lastName</literal>. This
    example is probably easy to understand because the names used are English
    words. However, for the TypoScript parser the second example makes equally
    sense - if it makes sense at all is only determined by the scope in which
    the TypoScript code is used.</para>

    <para>TypoScript is not only well suited for defining objects and
    properties but is also specialized in mapping hierarchical
    structures:</para>

    <example>
      <title>A Person and some more properties</title>

      <programlisting language="typoscript">somePerson = Person
somePerson.firstName = "John"
somePerson.lastName = "Doe"
somePerson.address.street = "Rigensgade"
somePerson.address.city = "København" </programlisting>
    </example>

    <para>Some people argue that other well-established formats exist which
    could be used instead of TypoScript. But although we, as the TYPO3
    developers, are very open towards using standards, we are still convinced
    that TypoScript is the best syntax for the job. It is safer to write than
    YAML, way less typing than XML, doesn't require the amount of knowledge
    you'd need for PHP and it can be learned in a few minutes. You'll see in
    the next sections that TypoScript is much easier to learn than you might
    expect from its reputation.</para>
  </section>

  <section>
    <title>TypoScript syntax</title>

    <section>
      <title>A first example</title>

      <para>As already mentioned, TypoScript is commonly used to map values to
      a hierarchy - a tree of objects. This object tree is a central concept
      used in the TYPO3 CMS. The branches of the tree are indicated with
      periods "<literal>.</literal>" – a syntax which can also be found in
      some languages such as JavaScript and conveys the idea of defining
      objects and their properties. The equal sign "<literal>=</literal>" is
      used for assigning values or objects types and not, as you might
      suppose, to compare values.</para>

      <para><example>
          <title>Abstract example of defining an object and assigning a
          property</title>

          <programlisting language="typoscript"><co
              xml:id="co-syntax-01-objectname" /><replaceable>objectName</replaceable> = <co
              xml:id="co-syntax-01-objecttype" /><replaceable>ObjectType</replaceable>
<replaceable>objectName</replaceable>.<co xml:id="co-syntax-01-propertyname" /><replaceable>propertyName</replaceable> = <replaceable>value</replaceable></programlisting>
        </example></para>

      <para>The example above demonstrates how an object is defined and how a
      value is assigned to a property.</para>

      <calloutlist>
        <callout arearefs="co-syntax-01-objectname">
          <para>The object name identifies the new object and can be freely
          chosen. It must consist of a combination of the following
          characters: A-Z, a-z, 0-9</para>
        </callout>

        <callout arearefs="co-syntax-01-objecttype">
          <para>An object must be of a specific type. Which types are
          available depends on the context where the TypoScript code is used.
          We'll have a closer look at these contexts, soon.</para>
        </callout>

        <callout arearefs="co-syntax-01-propertyname">
          <para>Values can be assigned to the properties of an object by
          referring to the property's name. Which properties exist, depends on
          the object type.</para>
        </callout>
      </calloutlist>

      <para>Too abstract? Then let's be more specific and have a look at a
      real world example:</para>

      <example>
        <title>Definition of a "Text" content object</title>

        <programlisting>myText = Text
myText.value = "Hello world!"</programlisting>
      </example>

      <para>In these two lines we define a new object called
      <varname>myText</varname> which is of the type
      <classname>Text</classname> and assign the value <literal>Hello
      world!</literal> to the a property called
      <property>value</property>.</para>

      <para>Objects can be easily be grouped into branches of the object tree.
      Consider the following illustration:</para>

      <para><figure>
          <title>A simple object tree</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="TypoScript-Illustration01-SimpleObjectTree.png"></imagedata>
            </imageobject>
          </mediaobject>
        </figure></para>

      <para>The following TypoScript would be neccessary to created the above
      tree:</para>

      <example>
        <title>TS code for the simple object tree</title>

        <programlisting language="typoscript">library.boilerplates.greeting = Text
library.boilerplates.greeting.value = "Hello world"
library.boilerplates.footnote = Text
library.boilerplates.footnote.value = "&amp;copy;2007 by the TYPO3 guys"</programlisting>
      </example>
    </section>

    <section>
      <title>Basic syntax</title>

      <para>TypoScript is parsed in a very simple way; line by line. This
      means that each line normally contains three parts based on the
      following formula:</para>

      <para><replaceable>[object path]</replaceable>
      <replaceable>[operator]</replaceable>
      <replaceable>[value]</replaceable></para>

      <para><itemizedlist>
          <listitem>
            <para>The object path is a single object name or a path to that
            object, defined by several object names separated by periods
            "."</para>
          </listitem>

          <listitem>
            <para>An operator is one of the following: "=", "&lt;", "&gt;",
            "=&lt;". They are described later in this section.</para>
          </listitem>

          <listitem>
            <para>The value can be one of the following:</para>

            <itemizedlist>
              <listitem>
                <para>a literal string enclosed by single or double quotes.
                Single- and double quotes as well as the backslash and the
                dollar sign must be escaped with a backslash sign. Examples:
                <literal>"Hello world"</literal> or <literal>"and I said
                \"Hello world\""</literal></para>
              </listitem>

              <listitem>
                <para>a number. Example: <literal>23</literal></para>
              </listitem>

              <listitem>
                <para>a constant, written in all UPPERCASE. Examples:
                <literal>BLUE</literal> or
                <literal>MY_SPECIAL_CONSTANT</literal></para>
              </listitem>

              <listitem>
                <para>an object type, written in UpperCamelCase. Examples:
                <literal>Text</literal> or
                <literal>HierarchicalMenu</literal></para>
              </listitem>

              <listitem>
                <para>a variable or a combination of literals and variables.
                Example: <literal>"Hello $name, nice to meet you!"</literal>
                (the concept of variables will be explained in a later
                section)</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist></para>

      <para>In the following example, <varname>myObject</varname> is defined
      as a <classname>HTML</classname> content object and the property
      <property>value</property> is set:</para>

      <example>
        <title>A simple HTML content object</title>

        <programlisting language="TypoScript">myObject = HTML
myObject.value = "&lt;div&gt;some HTML code&lt;/div&gt;"</programlisting>
      </example>

      <figure>
        <title>The resulting object tree</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="TypoScript-Illustration02-SimpleHTMLObject.png"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Confinements: <literal>{}</literal> signs</title>

      <para>The curly braces are used to assign many object properties in a
      simple way at once. It's called a <firstterm>confinement</firstterm> or
      <firstterm>nesting of properties</firstterm>.</para>

      <example>
        <title>Confinements</title>

        <programlisting language="typoscript">   # This definition ...
somePerson = Person
somePerson.firstName = "John"
somePerson.lastName = "Doe"
somePerson.address.street = "Rigensgade"
somePerson.address.city = "København"

   # ... can be nicer structured with confinements:
somePerson = Person
somePerson {
   firstName = "John"
   lastName = "Doe"
   address {
      street = "Rigensgade"
      city = "København"
   }
} </programlisting>
      </example>
    </section>

    <section>
      <title>"<literal>=</literal>" operator</title>

      <para>In general, the "<literal>=</literal>" operator is used to assign
      values. As already mentioned, values can be literals, numbers,
      constants, object types or variables. If a value already exists, it will
      be overwritten.</para>

      <para>Here are a few examples for each option:</para>

      <example>
        <title>Assigning values</title>

        <programlisting>   # Assigning object types:
myObject = HTML
someTextObject = Text
aSpecialObject = SomeSpecializedContentObjectType

   # Assigning literals
someTextObject.value = "Hello world!"
myObject.value = "   &lt;- three spaces here"
myObject.value = "Say \"hello\" to the world."
xy.fileLocation = "c:\\mystuff\\things\\files\\cmd.exe"
coffeeObject.espressoExtractionDuration = 25

   # Assigning constants
someTextObject.value = HELLO_WORLD_MESSAGE

   # Assigning variables
someTextObject.value = $message</programlisting>
      </example>
    </section>

    <section>
      <title>"<literal>&gt;</literal>" operator</title>

      <para>The "<literal>&gt;</literal>" operator is used to unset whole
      objects or single properties:</para>

      <example>
        <title>Unsetting objects and properties</title>

        <programlisting language="TypoScript">library.myObject = HTML
library.myObject.value = "&lt;strong&gt;Hello world!&lt;/strong&gt;"

library.anotherObject = Text
library.anotherObject.value = "Hi there"

library.myObject &gt;
library.anotherObject.value &gt;</programlisting>
      </example>

      <para>The above example results in the following object tree:</para>

      <figure>
        <title>The resulting object tree</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="TypoScript-Illustration03-UnsettingOperator.png"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>"<literal>&lt;</literal>" operator</title>

      <para>The "<literal>&lt;</literal>" operator is used to copy one object
      or a whole object branch to another. The whole object is copied (ie.
      cloned) - both, value and properties - and it overrides any existing
      objects and values at the target position.</para>

      <example>
        <title>Copying objects</title>

        <programlisting language="TypoScript">myObject = HTML
myObject.value = "&lt;div&gt;HTML code&lt;/div&gt;"

myOtherObject &lt; myObject</programlisting>
      </example>

      <para>In the above example the result is two independent sets of objects
      and their property which are exactly the same (duplicates). However they
      are <emphasis>not references</emphasis> to each other but independent
      copies:</para>

      <figure>
        <title>Copied objects in the object tree</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="TypoScript-Illustration04-CopyingObjects.png"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>It is common practice to copy objects, using them as a kind of
      template or boilerplate and then modifying only specific
      properties:</para>

      <example>
        <title>Copying branches, overriding single properties</title>

        <programlisting>library.aLotOfObjects {
   oneObject = SomeType
   oneObject.firstProperty = "John"
   oneObject.subObject.secondProperty = "Doe"

   secondObject &lt; .oneObject
}

myObject &lt; library.aLotOfObjects
myObject.secondObject.firstProperty = "Johannes"</programlisting>
      </example>

      <para>Note the different way of referring to an object for the
      <varname>secondObject</varname>: the <literal>.oneObject</literal>
      refers to an object called <varname>oneObject</varname> in the same
      branch or level of the tree. An alternative would have been to
      write:</para>

      <programlisting language="TypoScript">   secondObject &lt; library.aLotOfObjects.oneObject</programlisting>

      <para>In any case, the resulting object tree would look like
      this:</para>

      <figure>
        <title>Object tree after copy operations</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="TypoScript-Illustration05-CopyingObjects.png"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>"=<literal>&lt;</literal>" operator</title>

      <para>The "<literal>=&lt;</literal>" operator is used to reference to an
      object or a whole object branch. The whole object is not copied but only
      referenced.</para>

      <example>
        <title>Referencing objects</title>

        <programlisting language="TypoScript">myObject = HTML
myObject.value = "&lt;div&gt;HTML code&lt;/div&gt;"

myOtherObject =&lt; myObject</programlisting>
      </example>

      <para>In the above example the result is two independent object names
      refering to the identical object instance:</para>

      <figure>
        <title>Referenced objects in the object tree</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="TypoScript-Illustration06-ReferencingObjects.png"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Let's see what happens if we take the example of the copy-operator
      and just use references instead:</para>

      <example>
        <title>Referencing branches, overriding properties</title>

        <programlisting>library.aLotOfObjects {
   oneObject = SomeType
   oneObject.firstProperty = "John"
   oneObject.subObject.secondProperty = "Doe"

   secondObject =&lt; .oneObject
}

myObject =&lt; library.aLotOfObjects
myObject.secondObject.firstProperty = "Johannes"</programlisting>
      </example>

      <para>The resulting object tree looks quite different:</para>

      <figure>
        <title>Object tree after referencing operations</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="TypoScript-Illustration07-ReferencingObjects.png"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>"<literal>&lt;&lt;</literal>" operator</title>

      <para>The "<literal>&lt;&lt;</literal>" operator</para>

      <para>A powerful feature of TYPO3's TypoScript engine is the ability to
      process property values. Processors allow you to transform strings, add
      or combine information from elsewhere in the system or pass the current
      value to arbitrary user functions which take further action, depending
      on the content.</para>

      <para>Probably the most popular processor function is the
      <methodname>wrap()</methodname> method. It pre- and appends a string to
      the property value:</para>

      <example>
        <title>Using the wrap() value processor</title>

        <programlisting language="TypoScript">myObject = Text
myObject.value = "I am so strong!"
myObject.value &lt;&lt; 1.wrap("&lt;strong&gt;", "&lt;/strong&gt;")</programlisting>
      </example>

      <para>The rendered output of this <classname>Text</classname> object
      looks like this:</para>

      <para><markup>&lt;strong&gt;I am so
      strong!&lt;/strong&gt;</markup></para>

      <para>The <property>value</property> property of the
      <classname>Text</classname> object has been processed by the
      <function>wrap()</function> function before it was displayed on the
      website. Please note, that the processor does not modify the original
      property – a second turn will deliver the exact same result.</para>

      <para>Processors are called like functions in a programming language. In
      fact, a processor function is directly related to a PHP function of the
      same name which accepts (almost) the same arguments. Which arguments are
      expected, depends on the processor function (you find all details in the
      TypoScript Reference).</para>

      <para>A good thing about processor functions is that you can run them in
      a chain: The first processor gets the original value and passes the
      processed value to the next processor which processes it and ...</para>

      <para>Well, another good thing about processor functions is that all
      value processors are available for any property.</para>

      <para>But before we wax lyrical about processors, let's add another
      function. The <function>crop()</function> processor takes (at least) two
      arguments: to which length a string should be cropped and if a string
      should be appended.</para>

      <example>
        <title>Two processors in a chain</title>

        <programlisting language="TypoScript">myObject = Text
myObject.value = "I am so strong!"
myObject.value &lt;&lt; 1.crop(8, "...")
myObject.value &lt;&lt; 2.wrap("&lt;strong&gt;", "&lt;/strong&gt;")</programlisting>
      </example>

      <para>And here is the result:</para>

      <para><markup>&lt;strong&gt;I am so ...&lt;/strong&gt;</markup></para>

      <para>The order in which the processor functions are called is
      determined by the numerical index (<literal>1</literal> and
      <literal>2</literal> in the above example). Of course you can run a
      <function>wrap()</function> function then a <function>crop()</function>
      function, then a <function>wrap()</function> function again and so on.
      There are a big variety of processors available which you can run
      multiple times in any order and medium-skilled PHP developers can easily
      create new ones in a few minutes. And of course you can use variables as
      arguments for processor functions.</para>

      <para>The following example configures a <classname>Text</classname>
      object which announces whether the current page has sub pages or not. It
      uses two new processor functions: an <function>if</function> function
      which takes a condition as an argument an returns either the value of
      the second or third argument if the condition was true or not. And a
      <function>hasSubPages</function> function which returns
      <constant>TRUE</constant> if the current page has sub pages:</para>

      <example>
        <title>Has sub pages or not</title>

        <programlisting language="TypoScript">yesHasSubPagesMessage = Text
yesHasSubPagesMessage.value = "Yes, this page has sub pages."

myObject = Text
myObject.$yesMessage &lt; yesHasSubPagesMessage
myObject.value &lt;&lt; 1.if(hasSubPages(), $yesMessage, "No, this page has no sub pages."</programlisting>
      </example>

      <para>This code surely could have been simplified - but we wanted to
      demonstrate the use of variables again. As you can see, the property
      <property>value</property> can even be processed if no value has been
      assigned earlier.</para>

      <para>As already mentioned, you are not restricted to using the built-in
      processors of the <package>CMS</package> package but can create your own
      processors. The only requirement is that your public processor method
      accepts the subject (ie. the value to be processed) as the first
      argument and returns a string as the result. Once you have programmed
      your own processor, just call it by specifying the object and method
      name as seen in the next example:</para>

      <example>
        <title>Calling user-defined processors</title>

        <programlisting language="TypoScript">myObject = Text
myObject.value = "Creating processors is easy!"
myObject.value &lt;&lt; 1.F3_MyPackage_MyProcessors-&gt;translate("spanish")</programlisting>
      </example>

      <para>The expected output of this TypoScript object is something like
      <computeroutput>¡Crear procesadores es facil!</computeroutput> -
      provided that you wrote a processor which is capable of translating
      text.</para>

      <tip>
        <para>The best way to learn how easy it is to create your own
        processors is browsing through the code of the functions provided by
        the <package>CMS</package> package. Just check out the class
        <classname>F3_CMS_TypoScript_Processors</classname>.</para>
      </tip>

      <note>
        <para>If you don't specify an object name but only refer to the
        processor method name, the object name
        <classname>Processors</classname> will be used, preceeded by the
        currently defined <emphasis>default namespace</emphasis> (you'll get
        an introduction to namespaces in just a few sections). Of course you
        can use namespaces instead of specifying the whole object name
        (<code>1.myNamespace:translate("spanish")</code> instead of
        <code>1.F3_MyPackage_MyProcessors-&gt;translate("spanish")</code>).</para>
      </note>
    </section>

    <section>
      <title>Comments</title>

      <para>When a line starts with "<literal>//</literal>" or
      "<literal>#</literal>" it is considered a comment which means that the
      line is totally ignored in the parsing process.</para>

      <example>
        <title>Comments</title>

        <programlisting language="TypoScript">// This is a comment
myObject = HTML
myObject.value = "&lt;div&gt;some HTML code&lt;/div&gt;"
# This line is also a comment</programlisting>
      </example>

      <para>A block of comment is indicated by enclosing it into
      "<literal>/*</literal>" and "<literal>*/</literal>". Anything within
      that comment block will be ignored.</para>

      <example>
        <title>Comment blocks</title>

        <programlisting language="TypoScript">/* This is a comment
 ... and this line is within that comment which ...
 ends here: */
myObject = HTML
myObject.value = "&lt;div&gt;some HTML code&lt;/div&gt;"
</programlisting>
      </example>
    </section>

    <section>
      <title>Variables</title>

      <para>In some cases it is handy to access a placeholder instead of
      writing down a whole object definition multiple times. Imagine you're
      working with boilerplates, some of them are regular
      <classname>Text</classname> objects others might be literals, and now
      you want to create a new object which combines these premade chunks of
      text. One option to do that is using variables:</para>

      <example>
        <title>Using variables</title>

        <programlisting language="TypoScript">boilerplates.helloMessage = Text
boilerplates.helloMessage.value = "Hello you!"

myObject = Text
myObject.$hello &lt; boilerplates.helloMessage
myObject.$goodbye = "Goodbye, see you soon!"
myObject.value = "$hello&lt;br /&gt;Nice that you\'re here again.&lt;br /&gt;$goodbye"</programlisting>
      </example>

      <para>After parsing and transforming the above TypoScript code into PHP
      objects, the value of <varname>myObject</varname> would be
      <literal>"Hello you!&lt;br /&gt;Nice that you\'re here again.&lt;br
      /&gt;Goodbye, see you soon!"</literal>.</para>

      <para>As you can see in the example, you create a variable just as if it
      was a property, but with the difference that you prepend it with a
      dollar sign "<literal>$</literal>". You are free to choose any name for
      your variables as long as you only use characters and numbers.</para>

      <para>There are two different usages in the above code: the variable
      <varname>$hello</varname> contains a <classname>Text</classname> object
      which was copied from the object path
      <varname>boilerplates.helloMessage</varname>. The second variable
      <varname>$goodbye</varname> is not an object, but contains a literal
      string. Both are combined into a new string for the
      <varname>myObject.value</varname> property. That means: you can assign
      objects just as well as literals or numbers to your variables and
      concatenate them to a string. The rule however is that objects must be
      <emphasis>TypoScript Content Objects</emphasis> which can be rendered as
      content (contrary to simple TypoScript Objects which are mainly used for
      storing configuration).</para>

      <para>The scope of variables is restricted to the TypoScript object they
      have been defined in. The following code illustrates how variables can
      be accessed – and how not:</para>

      <example>
        <title>The scope of variables</title>

        <programlisting language="TypoScript">someObjects {
   firstObject = Text
   firstObject.$message = "Hey, I\'m the first object."
   firstObject.value = $message

   secondObject = Text

      # This doesn't work because $message is out of scope:
   secondObject.value = $message

      # This doesn't work either:
   secondObject.value = firstObject.$message

      # But this is a way to get the message of the firstObject:
   secondObject.$secondMessage &lt; someObjects.firstObject
   secondObject.value = $secondMessage

      # However, this code does not lead to the expected result:
   secondObject.$secondMessage &lt; someObjects.firstObject.value
   secondObject.value = $secondMessage

      # Variables can be used within single- and double quotes,
      # but the dollar sign always has to be escaped:
   thirdObject = Text
   thirdObject.$product = "Mountainbike"
   thirdObject.$price = "1500"
   thirdObject.value = "You just bought a $product for \$ $price."
   thirdObject.value = 'You just bought a $product for \$ $price."

}
</programlisting>
      </example>
    </section>

    <section>
      <title>Constants</title>

      <para></para>
    </section>

    <section>
      <title>Namespaces</title>

      <para>The object types which were used in the previous examples exist as
      real PHP classes, therefore TypoScripts maps TypoScript objects to real
      PHP objects which have the same properties like the TypoScript objects.
      The names of these object types, for example <classname>Text</classname>
      or <classname>HTML</classname> are mapped to class names (more
      precisely: object names). The Typoscript Object called
      <classname>Text</classname> is represented by a class with the full name
      <classname>\F3\CMS\TypoScript\Text</classname>.</para>

      <para>The reason why this mapping works is that a <emphasis>default
      namespace</emphasis> has been defined for the TypoScript object types.
      In the TYPO3 CMS the default namespace is
      <classname>\F3\CMS\TypoScript</classname> but it is possible to define
      additional namespaces in order to use TypoScript object types which are
      not available in the <package>CMS</package> package. It is even possible
      to define a different default namespace.</para>

      <para>Consider a package <package>CoolForms</package> which provides a
      new kind of TypoScript object implemented by a class called
      <classname>F3\CoolForms\TypoScript\Form</classname>. The following
      TypoScript code would use that new object type by declaring a new
      namespace:</para>

      <example>
        <title>Using namespaces</title>

        <programlisting language="TypoScript">namespace: forms = F3\CoolForms\TypoScript


lib.someTextObject = Text
lib.someTextObject.value = "Hello, this is a regular Text object."

lib.someFormObject = forms\Form
lib.someFormObject.fields.1 = forms\InputField
lib.someFormObject.fields.1.label = "Your name"</programlisting>
      </example>
    </section>

    <section>
      <title>Conditions</title>

      <para><remark>The future concept for conditions is still to be
      discussed.</remark></para>
    </section>

    <section>
      <title>Includes</title>

      <para>You can also add include instructions to your TypoScript code to
      externalize certain parts or the whole TypoScript code. Here is an
      example for an include instruction:</para>

      <example>
        <title>Include instruction</title>

        <programlisting>include: source = "FILE: mytyposcript.txt"</programlisting>
      </example>

      <remark>We'll have to discuss how a TypoScript include has to look like
      as soon as the concept for the Resource Manager is settled.</remark>
    </section>
  </section>

  <section>
    <title>What's new in TypoScript 2.0?</title>

    <para></para>
  </section>
</section>
